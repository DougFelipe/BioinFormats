[
  {
    "extension": "bam",
    "name": "Binary Alignment Map",
    "area": [
      "Genomics",
      "Transcriptomics"
    ],
    "description": "The compressed binary version of the SAM format for efficient storage of alignments.",
    "example_filenames": [
      "alignment.bam",
      "sorted_reads.bam"
    ],
    "example_file_content": "[Binary file - not human-readable]",
    "example_file_explanation": [
      "This is a binary file, which is a compressed version of a SAM file.",
      "It contains the same alignment data but is not human-readable.",
      "Requires tools like SAMtools to be viewed or converted.",
      "An index file (.bai) allows for fast access to specific genomic regions."
    ],
    "pipeline_examples": [
      {
        "pipeline": "SAM → SAMtools → BAM",
        "explanation": "A text-based SAM alignment file is converted and compressed into the efficient binary BAM format using SAMtools."
      },
      {
        "pipeline": "BAM → GATK → variant calling → VCF",
        "explanation": "A sorted and indexed BAM file is used by the GATK toolkit to identify genetic variants, with results stored in a VCF file."
      },
      {
        "pipeline": "BAM → IGV → genome visualization",
        "explanation": "BAM files are loaded into genome browsers like IGV to visually inspect how individual reads align to the reference genome."
      }
    ],
    "tools": [
      "SAMtools",
      "IGV",
      "GATK",
      "Picard",
      "BEDTools"
    ],
    "references": [
      {
        "title": "SAM/BAM Format Specification",
        "url": "https://samtools.github.io/hts-specs/SAMv1.pdf",
        "type": "standard"
      }
    ],
    "encoding_type": "Binary",
    "used_in_repositories": [
      "GEO (NCBI)",
      "ArrayExpress",
      "TCGA"
    ],
    "notes": "Binary format optimized for fast processing. Requires indexing (.bai) for random access."
  },
  {
    "extension": "bed",
    "name": "Browser Extensible Data",
    "area": [
      "Genomics",
      "Epigenomics"
    ],
    "description": "A simple format for defining genomic regions with chromosome coordinates.",
    "example_filenames": [
      "peaks.bed",
      "genes.bed",
      "regions.bed"
    ],
    "example_file_content": "chr1\t1000\t2000\tfeature1\t100\t+\nchr1\t3000\t4000\tfeature2\t200\t-",
    "example_file_explanation": [
      "Line 1: Defines a feature named 'feature1' on chromosome 1, from base 1000 to 2000, on the positive strand.",
      "Line 2: Defines a feature named 'feature2' on chromosome 1, from base 3000 to 4000, on the negative strand.",
      "The columns are: chromosome, start, end, name, score, and strand."
    ],
    "pipeline_examples": [
      {
        "pipeline": "ChIP-seq peaks → BED → genome annotation",
        "explanation": "The genomic coordinates of protein-binding sites (peaks) from a ChIP-seq experiment are stored in a BED file for downstream annotation."
      },
      {
        "pipeline": "BED → BEDTools → genomic intervals",
        "explanation": "BEDTools is used to perform set operations on genomic regions (e.g., finding overlaps or differences) defined in BED files."
      },
      {
        "pipeline": "BED → UCSC Browser → visualization",
        "explanation": "A BED file can be uploaded as a custom track to the UCSC Genome Browser to visualize specific genomic features."
      }
    ],
    "tools": [
      "BEDTools",
      "IGV",
      "UCSC Genome Browser",
      "Galaxy"
    ],
    "references": [
      {
        "title": "BED Format Description",
        "url": "https://genome.ucsc.edu/FAQ/FAQformat.html#format1",
        "type": "documentation"
      }
    ],
    "encoding_type": "ASCII / UTF-8",
    "used_in_repositories": [
      "UCSC Genome Browser",
      "ENCODE",
      "Roadmap Epigenomics"
    ],
    "notes": "A flexible format with 3 to 12 columns. Widely used for genomic annotation and visualization."
  },
  {
    "extension": "cram",
    "name": "CRAM Format",
    "area": [
      "Genomics",
      "Big Data & Repositories"
    ],
    "description": "A compressed binary format for storing aligned sequence data. CRAM reduces file size by storing differences relative to a reference genome.",
    "example_filenames": [
      "sample.cram"
    ],
    "example_file_content": "[Binary file - reference-based compression]",
    "example_file_explanation": [
      "CRAM files are binary and compressed using the reference genome.",
      "They contain the same alignment data as SAM/BAM but require the reference to decode.",
      "Reference-based compression enables smaller file sizes compared to BAM."
    ],
    "pipeline_examples": [
      {
        "pipeline": "BAM → SAMtools → CRAM",
        "explanation": "A BAM file is converted into a CRAM file using SAMtools with a reference genome provided."
      },
      {
        "pipeline": "CRAM → CRAMtools → read decompression",
        "explanation": "CRAMtools or SAMtools is used to extract alignments for specific regions or convert back to SAM."
      },
      {
        "pipeline": "CRAM → GATK → variant calling",
        "explanation": "Compressed CRAM files are used as input to GATK pipelines for calling genetic variants efficiently."
      }
    ],
    "tools": [
      "SAMtools",
      "htslib",
      "GATK",
      "CRAMtools"
    ],
    "references": [
      {
        "title": "CRAM Format Overview",
        "url": "https://samtools.github.io/hts-specs/CRAMv3.pdf",
        "type": "standard"
      }
    ],
    "encoding_type": "Binary",
    "used_in_repositories": [
      "ENA",
      "EGA"
    ],
    "notes": "Efficient for large-scale sequencing datasets; smaller size but requires reference genome."
  },
  {
    "extension": "fasta",
    "name": "FASTA Format",
    "area": [
      "Genomics",
      "Transcriptomics",
      "Proteomics"
    ],
    "description": "A text-based format for representing nucleotide or peptide sequences. Each sequence is preceded by a single-line description that starts with a '>' character.",
    "example_filenames": [
      "sequences.fasta",
      "genome.fa",
      "proteins.faa"
    ],
    "example_file_content": ">seq1 description\nACGTACGTACGT\n>seq2 description\nTGCATGCATGCA",
    "example_file_explanation": [
      "Line 1: Header of the first sequence, starting with '>' followed by the identifier 'seq1' and an optional description.",
      "Line 2: Nucleotide sequence of the first entry (ACGTACGTACGT).",
      "Line 3: Header of the second sequence with identifier 'seq2' and description.",
      "Line 4: Nucleotide sequence of the second entry (TGCATGCATGCA)."
    ],
    "pipeline_examples": [
      {
        "pipeline": "FASTA → BLAST → alignment results",
        "explanation": "A sequence from a FASTA file is used as a query in a BLAST search to find similar sequences in a database, producing alignment results."
      },
      {
        "pipeline": "FASTA → Clustal Omega → multiple alignment",
        "explanation": "Multiple sequences from a FASTA file are aligned using Clustal Omega to identify conserved regions and evolutionary relationships."
      },
      {
        "pipeline": "FASTA → MUSCLE → phylogenetic tree",
        "explanation": "Sequences are aligned with MUSCLE, and this alignment is then used as input for phylogenetic software to construct an evolutionary tree."
      }
    ],
    "tools": [
      "BLAST",
      "Clustal Omega",
      "MUSCLE",
      "MAFFT",
      "SeqKit"
    ],
    "references": [
      {
        "title": "FASTA Format Description",
        "url": "https://en.wikipedia.org/wiki/FASTA_format",
        "type": "documentation"
      },
      {
        "title": "NCBI FASTA Format Guide",
        "url": "https://www.ncbi.nlm.nih.gov/BLAST/fasta.shtml",
        "type": "standard"
      }
    ],
    "encoding_type": "ASCII / UTF-8",
    "used_in_repositories": [
      "NCBI GenBank",
      "ENA",
      "DDBJ",
      "UniProt"
    ],
    "notes": "A widely supported and de facto standard for biological sequences. Common extensions include .fa, .fas, .fna (DNA), .faa (amino acids)."
  },
  {
    "extension": "fastq",
    "name": "FASTQ Format",
    "area": [
      "Genomics",
      "Transcriptomics"
    ],
    "description": "A text-based format for storing nucleotide sequences along with their corresponding base quality scores.",
    "example_filenames": [
      "reads.fastq",
      "sample_R1.fq",
      "sequences.fastq.gz"
    ],
    "example_file_content": "@read_identifier\nACGTACGT\n+\n!''*((((***+))%%%++)(%%%%).1***-+*''))**55CCF>>>>>>CCCCCCC65",
    "example_file_explanation": [
      "Line 1: Read identifier, starting with '@' followed by a unique sequence name.",
      "Line 2: Nucleotide sequence (ACGTACGT).",
      "Line 3: Optional separator '+' (can repeat the identifier).",
      "Line 4: ASCII quality string where each character represents the quality of the corresponding base."
    ],
    "pipeline_examples": [
      {
        "pipeline": "FASTQ → FastQC → Trimmomatic → BWA → BAM",
        "explanation": "Raw sequencing reads (FASTQ) are quality-checked (FastQC), trimmed (Trimmomatic), aligned to a reference (BWA), and compressed into a BAM file."
      },
      {
        "pipeline": "FASTQ → STAR → gene counts → DESeq2",
        "explanation": "An RNA-seq pipeline where reads are aligned (STAR), expression is quantified (gene counts), and differential expression is analyzed (DESeq2)."
      },
      {
        "pipeline": "FASTQ → Bowtie2 → SAM → variant calling",
        "explanation": "Reads are aligned to a genome (Bowtie2), the alignment is stored (SAM), and this is used as the basis for identifying genetic variants."
      }
    ],
    "tools": [
      "FastQC",
      "Trimmomatic",
      "BWA",
      "Bowtie2",
      "STAR"
    ],
    "references": [
      {
        "title": "FASTQ Format Specification",
        "url": "https://en.wikipedia.org/wiki/FASTQ_format",
        "type": "documentation"
      }
    ],
    "encoding_type": "ASCII / UTF-8",
    "used_in_repositories": [
      "NCBI SRA",
      "ENA",
      "DDBJ"
    ],
    "notes": "The standard for next-generation sequencing data. Quality scores are ASCII-encoded (Phred+33 or Phred+64)."
  },
  {
    "extension": "gff",
    "name": "General Feature Format",
    "area": [
      "Genomics",
      "Transcriptomics",
      "Epigenomics"
    ],
    "description": "A tab-delimited text format for describing genes and other features of DNA, RNA, and protein sequences.",
    "example_filenames": [
      "annotations.gff",
      "features.gff3"
    ],
    "example_file_content": "chr1\tRefSeq\tgene\t11874\t14409\t.\t+\t.\tID=gene0;Name=DDX11L1",
    "example_file_explanation": [
      "Column 1: Chromosome or reference sequence name.",
      "Column 2: Source of annotation (e.g., RefSeq).",
      "Column 3: Feature type (e.g., gene, exon, CDS).",
      "Columns 4–5: Start and end positions of the feature.",
      "Column 6: Score (optional).",
      "Column 7: Strand (+ or -).",
      "Column 8: Frame (phase).",
      "Column 9: Attributes (key-value pairs like ID and Name)."
    ],
    "pipeline_examples": [
      {
        "pipeline": "GFF → genome browser → visualization",
        "explanation": "GFF files are loaded into genome browsers to visualize annotated genomic elements."
      },
      {
        "pipeline": "GFF → HTSeq-count → gene expression",
        "explanation": "Used to assign sequencing reads to genomic features for RNA-seq quantification."
      },
      {
        "pipeline": "GFF → BEDTools → feature intersection",
        "explanation": "Used with BEDTools to find overlaps between annotated features and experimental data."
      }
    ],
    "tools": [
      "IGV",
      "UCSC Genome Browser",
      "HTSeq",
      "BEDTools"
    ],
    "references": [
      {
        "title": "GFF3 Format Specification",
        "url": "https://github.com/The-Sequence-Ontology/Specifications/blob/master/gff3.md",
        "type": "standard"
      }
    ],
    "encoding_type": "ASCII / UTF-8",
    "used_in_repositories": [
      "Ensembl",
      "NCBI",
      "UCSC"
    ],
    "notes": "GFF3 is the latest version, supporting hierarchical relationships between features."
  },
  {
    "extension": "gtf",
    "name": "Gene Transfer Format",
    "area": [
      "Genomics",
      "Transcriptomics"
    ],
    "description": "A specialized format similar to GFF, commonly used in transcript annotation and RNA-seq analysis.",
    "example_filenames": [
      "genes.gtf"
    ],
    "example_file_content": "chr1\tENSEMBL\texon\t11869\t12227\t.\t+\t.\tgene_id \"ENSG00000223972\"; transcript_id \"ENST00000456328\";",
    "example_file_explanation": [
      "Represents an exon of a transcript on chromosome 1.",
      "Contains metadata including gene_id and transcript_id.",
      "Used to define exon-intron structures and transcript boundaries."
    ],
    "pipeline_examples": [
      {
        "pipeline": "GTF → STAR → BAM",
        "explanation": "STAR aligner uses the GTF annotation to guide alignment of reads and generate spliced alignments."
      },
      {
        "pipeline": "GTF → featureCounts → read quantification",
        "explanation": "Used to count the number of reads overlapping each gene or exon."
      },
      {
        "pipeline": "GTF → StringTie → transcript assembly",
        "explanation": "StringTie assembles full-length transcripts from aligned reads using GTF as a guide."
      }
    ],
    "tools": [
      "STAR",
      "featureCounts",
      "StringTie",
      "Cufflinks"
    ],
    "references": [
      {
        "title": "GTF Format Specification",
        "url": "https://useast.ensembl.org/info/website/upload/gff.html",
        "type": "documentation"
      }
    ],
    "encoding_type": "ASCII / UTF-8",
    "used_in_repositories": [
      "Ensembl",
      "Gencode"
    ],
    "notes": "GTF is more restrictive than GFF3 and widely used in expression quantification tools."
  },
  {
    "extension": "sam",
    "name": "Sequence Alignment Map",
    "area": [
      "Genomics",
      "Transcriptomics"
    ],
    "description": "A text-based format that stores biological sequence alignment data against a reference genome. SAM files contain both a header section and an alignment section.",
    "example_filenames": [
      "alignment.sam",
      "rna_reads.sam"
    ],
    "example_file_content": "@HD\tVN:1.6\tSO:coordinate\n@SQ\tSN:chr1\tLN:248956422\nread1\t0\tchr1\t100\t255\t50M\t*\t0\t0\tACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII",
    "example_file_explanation": [
      "Line 1: Header line indicating SAM version and sorting order (coordinate).",
      "Line 2: Reference sequence header indicating sequence name 'chr1' and length.",
      "Line 3: Alignment line with read name 'read1' aligned to 'chr1' at position 100, with CIGAR string '50M'.",
      "   - Fields include flags (0 = unpaired, mapped), MAPQ (255), and sequences with quality scores."
    ],
    "pipeline_examples": [
      {
        "pipeline": "FASTQ → BWA → SAM → BAM",
        "explanation": "Reads in FASTQ format are aligned to a reference genome using BWA, generating a SAM file that can later be converted to BAM."
      },
      {
        "pipeline": "SAM → Picard → MarkDuplicates",
        "explanation": "SAM file is processed with Picard tools to mark duplicate reads before downstream analysis."
      },
      {
        "pipeline": "SAM → samtools view/sort → indexed BAM",
        "explanation": "SAM files are sorted and indexed with SAMtools for efficient downstream querying and variant calling."
      }
    ],
    "tools": [
      "BWA",
      "SAMtools",
      "Picard",
      "IGV"
    ],
    "references": [
      {
        "title": "SAM Format Specification",
        "url": "https://samtools.github.io/hts-specs/SAMv1.pdf",
        "type": "standard"
      }
    ],
    "encoding_type": "ASCII / UTF-8",
    "used_in_repositories": [
      "GEO",
      "SRA"
    ],
    "notes": "SAM is the human-readable version of BAM and is often used as an intermediate file during analysis."
  },
  {
    "extension": "vcf",
    "name": "Variant Call Format",
    "area": [
      "Genomics",
      "Clinical Bioinformatics"
    ],
    "description": "A standard format for storing genetic variations such as SNPs, indels, and structural variants.",
    "example_filenames": [
      "variants.vcf",
      "mutations.vcf.gz"
    ],
    "example_file_content": "##fileformat=VCFv4.2\n#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\nchr1\t123456\t.\tA\tG\t60\tPASS\tDP=30",
    "example_file_explanation": [
      "Line 1: Meta-information specifying the VCF format version (v4.2).",
      "Line 2: Header line defining the columns.",
      "Line 3: A variant record showing a change from 'A' to 'G' on chromosome 1 at position 123456."
    ],
    "pipeline_examples": [
      {
        "pipeline": "BAM → GATK → VCF → annotation",
        "explanation": "A VCF file is generated from alignments (BAM) using GATK, and then annotated to add functional information to the variants."
      },
      {
        "pipeline": "VCF → VCFtools → population analysis",
        "explanation": "A VCF file containing variants from multiple individuals is analyzed with VCFtools to calculate population genetics statistics."
      },
      {
        "pipeline": "VCF → PLINK → GWAS analysis",
        "explanation": "VCF data is converted and used in PLINK for genome-wide association studies (GWAS) to find links between variants and traits."
      }
    ],
    "tools": [
      "GATK",
      "VCFtools",
      "bcftools",
      "PLINK",
      "SnpEff"
    ],
    "references": [
      {
        "title": "VCF Format Specification",
        "url": "https://samtools.github.io/hts-specs/VCFv4.3.pdf",
        "type": "standard"
      }
    ],
    "encoding_type": "ASCII / UTF-8",
    "used_in_repositories": [
      "dbSNP",
      "ClinVar",
      "gnomAD",
      "dbVar"
    ],
    "notes": "The standard for genome-wide association studies (GWAS) and medical genomics. Supports multiple samples."
  },
  {
    "extension": "wig",
    "name": "Wiggle Format",
    "area": [
      "Genomics",
      "Epigenomics"
    ],
    "description": "A format designed for display of continuous-valued data such as read depth or signal intensity across a genome.",
    "example_filenames": [
      "signal_track.wig"
    ],
    "example_file_content": "track type=wiggle_0 name=\"Signal\"\nfixedStep chrom=chr1 start=1 step=1\n10\n12\n15\n13",
    "example_file_explanation": [
      "Line 1: Track definition for genome browsers.",
      "Line 2: fixedStep mode starting at position 1 with step size 1.",
      "Lines 3–6: Signal values at consecutive positions (1-based coordinates)."
    ],
    "pipeline_examples": [
      {
        "pipeline": "ChIP-seq → MACS2 → WIG",
        "explanation": "MACS2 outputs signal enrichment in WIG format for peak visualization."
      },
      {
        "pipeline": "BAM → bedtools genomecov → WIG",
        "explanation": "Read depth is calculated from BAM alignments and output as WIG file."
      },
      {
        "pipeline": "WIG → UCSC Genome Browser → visualization",
        "explanation": "Used to view continuous signal tracks across the genome in UCSC browser."
      }
    ],
    "tools": [
      "MACS2",
      "BEDTools",
      "UCSC Tools",
      "IGV"
    ],
    "references": [
      {
        "title": "WIG Format Description",
        "url": "https://genome.ucsc.edu/goldenPath/help/wiggle.html",
        "type": "documentation"
      }
    ],
    "encoding_type": "ASCII / UTF-8",
    "used_in_repositories": [
      "ENCODE",
      "Roadmap Epigenomics"
    ],
    "notes": "Replaced by BigWig in large-scale data visualization pipelines."
  }
]
